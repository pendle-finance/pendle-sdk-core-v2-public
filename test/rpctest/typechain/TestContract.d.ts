/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
    ethers,
    EventFilter,
    Signer,
    BigNumber,
    BigNumberish,
    PopulatedTransaction,
    BaseContract,
    ContractTransaction,
    Overrides,
    CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import type { TypedEventFilter, TypedEvent, TypedListener } from './common';

interface TestContractInterface extends ethers.utils.Interface {
    functions: {
        'decreaseTotal(uint256)': FunctionFragment;
        'getTotal()': FunctionFragment;
        'increaseTotal(uint256)': FunctionFragment;
        'setTotal(uint256)': FunctionFragment;
    };

    encodeFunctionData(functionFragment: 'decreaseTotal', values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: 'getTotal', values?: undefined): string;
    encodeFunctionData(functionFragment: 'increaseTotal', values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: 'setTotal', values: [BigNumberish]): string;

    decodeFunctionResult(functionFragment: 'decreaseTotal', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'getTotal', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'increaseTotal', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'setTotal', data: BytesLike): Result;

    events: {};
}

export class TestContract extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    listeners<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
    ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
    off<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>
    ): this;
    on<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>
    ): this;
    once<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>
    ): this;
    removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>
    ): this;
    removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
    ): this;

    listeners(eventName?: string): Array<Listener>;
    off(eventName: string, listener: Listener): this;
    on(eventName: string, listener: Listener): this;
    once(eventName: string, listener: Listener): this;
    removeListener(eventName: string, listener: Listener): this;
    removeAllListeners(eventName?: string): this;

    queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
        event: TypedEventFilter<EventArgsArray, EventArgsObject>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

    interface: TestContractInterface;

    functions: {
        decreaseTotal(
            value: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        getTotal(overrides?: CallOverrides): Promise<[BigNumber]>;

        increaseTotal(
            value: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        setTotal(
            value: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;
    };

    decreaseTotal(
        value: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getTotal(overrides?: CallOverrides): Promise<BigNumber>;

    increaseTotal(
        value: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTotal(
        value: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    callStatic: {
        decreaseTotal(value: BigNumberish, overrides?: CallOverrides): Promise<void>;

        getTotal(overrides?: CallOverrides): Promise<BigNumber>;

        increaseTotal(value: BigNumberish, overrides?: CallOverrides): Promise<void>;

        setTotal(value: BigNumberish, overrides?: CallOverrides): Promise<void>;
    };

    filters: {};

    estimateGas: {
        decreaseTotal(
            value: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        getTotal(overrides?: CallOverrides): Promise<BigNumber>;

        increaseTotal(
            value: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        setTotal(value: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;
    };

    populateTransaction: {
        decreaseTotal(
            value: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        getTotal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        increaseTotal(
            value: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        setTotal(
            value: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;
    };
}
