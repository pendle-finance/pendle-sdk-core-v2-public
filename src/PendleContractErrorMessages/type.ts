// This file is generated via `yarn generatePendleContractErrorMessageHandler`
import { type BigNumber as BN, BytesLike } from 'ethers';
import { Address } from '../types';

export type PendleContractErrorMessageHandler = {
    ApproxFail: () => string;
    ApproxParamsInvalid: (guessMin: BN, guessMax: BN, eps: BN) => string;
    ArrayEmpty: () => string;
    ArrayLengthMismatch: () => string;
    ArrayOutOfBounds: () => string;
    ChainNotSupported: (chainId: BN) => string;
    ExpiryInThePast: (expiry: BN) => string;
    FDCantFundFutureEpoch: () => string;
    FDFactoryDistributorAlreadyExisted: (pool: Address, distributor: Address) => string;
    GCNotPendleMarket: (caller: Address) => string;
    GCNotVotingController: (caller: Address) => string;
    InsufficientFeeToSendMsg: (currentFee: BN, requiredFee: BN) => string;
    InvalidWTime: (wTime: BN) => string;
    MFactoryLnFeeRateRootTooHigh: (lnFeeRateRoot: BN, maxLnFeeRateRoot: BN) => string;
    MFactoryReserveFeePercentTooHigh: (reserveFeePercent: BN, maxReserveFeePercent: BN) => string;
    MarketExchangeRateBelowOne: (exchangeRate: BN) => string;
    MarketExpired: () => string;
    MarketFactoryExpiredPt: () => string;
    MarketFactoryInvalidPt: () => string;
    MarketFactoryMarketExists: () => string;
    MarketInsufficientPtForTrade: (currentAmount: BN, requiredAmount: BN) => string;
    MarketInsufficientPtReceived: (actualBalance: BN, requiredBalance: BN) => string;
    MarketInsufficientSyReceived: (actualBalance: BN, requiredBalance: BN) => string;
    MarketProportionMustNotEqualOne: () => string;
    MarketProportionTooHigh: (proportion: BN, maxProportion: BN) => string;
    MarketRateScalarBelowZero: (rateScalar: BN) => string;
    MarketScalarRootBelowZero: (scalarRoot: BN) => string;
    MarketZeroAmountsInput: () => string;
    MarketZeroAmountsOutput: () => string;
    MarketZeroLnImpliedRate: () => string;
    MarketZeroTotalPtOrTotalAsset: (totalPt: BN, totalAsset: BN) => string;
    MsgNotFromReceiveEndpoint: (sender: Address) => string;
    MsgNotFromSendEndpoint: (sender: Address) => string;
    OnlyCelerBus: () => string;
    OnlyWhitelisted: () => string;
    OnlyYCFactory: () => string;
    OnlyYT: () => string;
    OracleTargetTooOld: (target: BN, oldest: BN) => string;
    OracleUninitialized: () => string;
    OracleZeroCardinality: () => string;
    RouterCallbackNotPendleMarket: (caller: Address) => string;
    RouterExceededLimitPtIn: (actualPtIn: BN, limitPtIn: BN) => string;
    RouterExceededLimitSyIn: (actualSyIn: BN, limitSyIn: BN) => string;
    RouterExceededLimitYtIn: (actualYtIn: BN, limitYtIn: BN) => string;
    RouterInsufficientLpOut: (actualLpOut: BN, requiredLpOut: BN) => string;
    RouterInsufficientPYOut: (actualPYOut: BN, requiredPYOut: BN) => string;
    RouterInsufficientPtOut: (actualPtOut: BN, requiredPtOut: BN) => string;
    RouterInsufficientPtRepay: (actualPtRepay: BN, requiredPtRepay: BN) => string;
    RouterInsufficientSyOut: (actualSyOut: BN, requiredSyOut: BN) => string;
    RouterInsufficientSyRepay: (actualSyRepay: BN, requiredSyRepay: BN) => string;
    RouterInsufficientTokenOut: (actualTokenOut: BN, requiredTokenOut: BN) => string;
    RouterInsufficientYtOut: (actualYtOut: BN, requiredYtOut: BN) => string;
    RouterInvalidAction: (selector: BytesLike) => string;
    RouterTimeRangeZero: () => string;
    SYCurve3crvPoolNotFound: () => string;
    SYCurveInvalidPid: () => string;
    SYInsufficientSharesOut: (actualSharesOut: BN, requiredSharesOut: BN) => string;
    SYInsufficientTokenOut: (actualTokenOut: BN, requiredTokenOut: BN) => string;
    SYInvalidTokenIn: (token: Address) => string;
    SYInvalidTokenOut: (token: Address) => string;
    SYQiTokenBorrowRateTooHigh: (borrowRate: BN, borrowRateMax: BN) => string;
    SYQiTokenMintFailed: (errCode: BN) => string;
    SYQiTokenRedeemFailed: (errCode: BN) => string;
    SYQiTokenRedeemRewardsFailed: (rewardAccruedType0: BN, rewardAccruedType1: BN) => string;
    SYZeroDeposit: () => string;
    SYZeroRedeem: () => string;
    VCEpochNotFinalized: (wTime: BN) => string;
    VCExceededMaxWeight: (totalWeight: BN, maxWeight: BN) => string;
    VCInactivePool: (pool: Address) => string;
    VCPoolAlreadyActive: (pool: Address) => string;
    VCPoolAlreadyAddAndRemoved: (pool: Address) => string;
    VCZeroVePendle: (user: Address) => string;
    VEExceededMaxLockTime: () => string;
    VEInsufficientLockTime: () => string;
    VEInvalidNewExpiry: (newExpiry: BN) => string;
    VENotAllowedReduceExpiry: () => string;
    VEPositionNotExpired: () => string;
    VEZeroAmountLocked: () => string;
    VEZeroPosition: () => string;
    VEZeroSlope: (bias: BN, slope: BN) => string;
    YCExpired: () => string;
    YCFactoryInvalidExpiry: () => string;
    YCFactoryYieldContractExisted: () => string;
    YCNoFloatingSy: () => string;
    YCNotExpired: () => string;
    YCNothingToRedeem: () => string;
    YCPostExpiryDataNotSet: () => string;
    YieldContractInsufficientSy: (actualSy: BN, requiredSy: BN) => string;
    ZeroAddress: () => string;
};
